# This action builds a docker image and deploys it to a registry, it uses the following steps:
# 1. Checks out the repo
# 2. Reads the .env file into a variable
# 3. Installs buildx
# 4. Gets the current tag and DIGEST. The tag will be used for auto updating the version. The DIGEST will be used to delete the old image. 
# 5. Builds the image and deploys it.
# 6. Deletes the previous image.
# 7. Sends build result to Teams
#
# Dependencies:
# 1. A .env file with specif parameters, e.g.:
#   SERVICE=landing_page
#   REGISTRY=registry.docker.libis.be
#   NAMESPACE=lirias
#   PLATFORM=linux/amd64

name: Build and Deploy

on:
  workflow_call:
    secrets:
      username:
        required: true
      password:
        required: true
      msteams_webhook:
        required: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Check out the repo
        uses: actions/checkout@v3
      - 
        name: Dotenv Action
        id: dotenv
        uses: falti/dotenv-action@v1.0.2  # Gets the key value pairs from the .env file.
        with:
          log-variables: true
      -
        name: Archive config files
        run: | 
          if [ -d ./config ]; then  #if the directory exists then we need to zip it
            tar zcvf config.tgz ./config/*
          fi
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.docker.libis.be
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.0
      - 
        name: Fetch Docker tags and set new version
        run: |
          # Using the API, get all tags from the repo then remove the 'lates' tag. 
          TAGS=$(curl -s --user ${{ secrets.username }}:${{ secrets.password }} https://${{ steps.dotenv.outputs.registry }}/v2/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}/tags/list | jq -r '.tags[]? // empty')
          echo "Curl tags: $TAGS"

          VERSION="$(date +%Y%m%d).1" # example: 20230817.1

          if [ -n "$TAGS" ]; then
            # Convert TAGS to an array and loop through
            IFS=' ' read -r -a tags_array <<< "$TAGS"
            while :; do
              # Check if any tag starts with VERSION
              if printf '%s\n' "${tags_array[@]}" | grep -q -e "^$VERSION"; then
                echo "A version starting with $VERSION found. Incrementing Minor and checking again..."
                prefix=${VERSION%.*}
                num=${VERSION#*.}
                new_num=$((num + 1))  # Increment the minor part
                # Reassemble the version
                VERSION="${prefix}.${new_num}"
              else
                echo "No version starting with $VERSION found. Stopping."
                break # Exit the loop if no matching version is found
              fi
            done
          fi

          # Append branch name to the version if ADD_BRANCH_NAME_TO_VERSION is true, found in .env file. 
          if [[ -n "${{ steps.dotenv.outputs.addbranchnametoversion }}" && "${{ steps.dotenv.outputs.addbranchnametoversion }}" == 'true' ]]; then
            VERSION="$VERSION-$GITHUB_REF_NAME"
          fi
    
          echo "Final version for use: $VERSION"

          # Now that we have the tag of the last build we use it to get the digest so we can delete it after the new build is done
          #DIGEST=$(curl -s --head -H "Accept: application/vnd.docker.distribution.manifest.v2+json" --user ${{ secrets.username }}:${{ secrets.password }} https://${{ steps.dotenv.outputs.registry }}/v2/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}/manifests/$TAG | grep 'Docker-Content-Digest:' | awk '{print $2}' | tr -d '\r')
          
          # Set environment variables
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # Output to log
          echo "New Version: $VERSION"
          #echo "Digest: $DIGEST"
      
      - 
         name: Build and push Docker image
         uses: docker/build-push-action@v3.3.0    #https://github.com/docker/build-push-action
         with:
          file: ${{ steps.dotenv.outputs.dockerfilelocation }}Dockerfile
          platforms: ${{ steps.dotenv.outputs.platform }}
          build-args: VERSION=${{ env.VERSION }}
          context: .
          push: true
          tags: | 
            ${{ steps.dotenv.outputs.registry }}/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}:${{ env.VERSION }}
            ${{ steps.dotenv.outputs.registry }}/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}:latest
          provenance: false
      #- 
      #  name: Delete previous image
      #  run: |
      #    if [[ ! -z "$DIGEST" ]]; then
      #      curl -X DELETE --user ${{ secrets.username }}:${{ secrets.password }} https://${{ steps.dotenv.outputs.registry }}/v2/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}/manifests/$DIGEST
      #    fi
      - 
        name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.19.0
        with:
          image-ref: '${{ steps.dotenv.outputs.registry }}/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}:latest'
          format: 'sarif'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'
      -          
        name: MSTeams Notification
        if: always() # No matter what the outcome we want to run this step.
        uses: freezer00/teams-webhook-action@v1.4.1
        with:
          webhook_url: ${{ secrets.msteams_webhook }}
          job: ${{ toJson(job) }}
          title: ${{ job.status == 'success' && '<span style="font-weight:bold; font-size:16px; color:green;">Build Succeeded</span>' || '<span style="font-weight:bold; font-size:16px; color:red;">Build Failed</span>' }}
