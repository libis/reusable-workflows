# This action builds a docker image and deploys it to a registry, it uses the following steps:
# 1. Checks out the repo
# 2. Reads the .env file into a variable
# 3. Installs buildx
# 4. Gets the current tag and DIGEST. The tag will be used for auto updating the version. The DIGEST will be used to delete the old image. 
# 5. Builds the image and deploys it.
# 6. Deletes the previous image.
# 7. Sends build result to Teams
#
# Dependencies:
# 1. A .env file with specif parameters, e.g.:
#   SERVICE=landing_page
#   REGISTRY=registry.docker.libis.be
#   NAMESPACE=lirias
#   PLATFORM=linux/amd64

name: Build and Deploy

on:
  workflow_call:
    secrets:
      username:
        required: true
      password:
        required: true
      msteams_webhook:
        required: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Check out the repo
        uses: actions/checkout@v3
      - 
        name: Dotenv Action
        id: dotenv
        uses: falti/dotenv-action@v1.0.2  # Gets the key value pairs from the .env file.
        with:
          log-variables: true
      -
        name: Archive config files
        run: | 
          if [ -d ./config ]; then  #if the directory exists then we need to zip it
            tar zcvf config.tgz ./config/*
          fi
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.docker.libis.be
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.0
      - 
        name: Fetch Docker tags and set new version
        run: |
          TAGS=$(curl -s --user ${{ secrets.username }}:${{ secrets.password }} https://${{ steps.dotenv.outputs.registry }}/v2/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}/tags/list | jq -r '.tags[]' | sort)
          REVERSE_DATE=$(date +%Y%m%d) # example: 20230817

          echo "Curl tags: $TAGS"

          # Get the last tag
          TAG=$(echo "$TAGS" | tail -n1)
          echo "Tag is: $TAG"

          # Check if the tag is 'latest'
          if [ "$TAG" == "latest" ]; then
            # Get the second-to-last tag
            TAG=$(echo "$TAGS" | tail -n2 | head -n1)
            echo "Second-to-last tag: $TAG"
          fi

          # If we get a valid tag back
          if [ ! -z "$TAG" ]; then
            MAJOR=$(echo $TAG | cut -d'.' -f1)
            MINOR=$(echo $TAG | cut -d'.' -f2)

            # Output to log
            echo "Old Major: $MAJOR"
            echo "Old Minor: $MINOR"

            # If MAJOR is today's date, increment MINOR
            if [ "$MAJOR" == "$REVERSE_DATE" ]; then
                MINOR=$((MINOR + 1))
            else
                # Else, set MAJOR to today's reversed date and MINOR to 1
                MAJOR=$REVERSE_DATE
                MINOR=1
            fi
          else
            echo "No matching tag found. Using reverse date and 1 as fallback version."
            MAJOR=$(date +%Y%m%d | rev)
            MINOR=1
          fi

          # Now that we have the tag of the last build we use it to get the digest so we can delete it after the new build is done
          DIGEST=$(curl -s --head -H "Accept: application/vnd.docker.distribution.manifest.v2+json" --user ${{ secrets.username }}:${{ secrets.password }} https://${{ steps.dotenv.outputs.registry }}/v2/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}/manifests/$TAG | grep 'Docker-Content-Digest:' | awk '{print $2}' | tr -d '\r')
          
          # Set environment variables
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV

          # Output to log
          echo "New Major: $MAJOR"
          echo "New Minor: $MINOR"
          echo "Digest: $DIGEST"
      - 
         name: Build and push Docker image
         uses: docker/build-push-action@v3.3.0    #https://github.com/docker/build-push-action
         with:
          file: ${{ steps.dotenv.outputs.dockerfilelocation }}Dockerfile
          platforms: ${{ steps.dotenv.outputs.platform }}
          build-args: VERSION=:${{ env.MAJOR }}.${{ env.MINOR }}
          context: .
          push: true
          tags: | 
            ${{ steps.dotenv.outputs.registry }}/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}:${{ env.MAJOR }}.${{ env.MINOR }}
            ${{ steps.dotenv.outputs.registry }}/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}:latest
          provenance: false
      - 
        name: Delete previous image
        run: |
          if [[ ! -z "$DIGEST" ]]; then
            curl -X DELETE --user ${{ secrets.username }}:${{ secrets.password }} https://${{ steps.dotenv.outputs.registry }}/v2/${{ steps.dotenv.outputs.namespace }}/${{ steps.dotenv.outputs.service }}/manifests/$DIGEST
          fi
      -          
        name: MSTeams Notification
        if: always() # No matter what the outcome we want to run this step.
        uses: skitionek/notify-microsoft-teams@master
        with:
          # webhook_url: ${{ secrets.msteams_webhook }}
          webhook_url: "https://kuleuven.webhook.office.com/webhookb2/70172ee1-ea8e-4794-afcd-720728f46d22@3973589b-9e40-4eb5-800e-b0b6383d1621/IncomingWebhook/debf2857413549ef832de8926744af6d/62970b8d-d41f-45d5-bf78-35ea5b671fc7"
          hide_facts: true
          # TEAMS_MSG_TITLE: "Build ${{ job.status }}!"
          # TEAMS_MSG_SUMMARY: "The docker build and deply flow for ${{ github.repository }} was a ${{ job.status }}!"
          # TEAMS_MSG_TYPE: ${{ job.status }}
